
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include "Props.h"
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

#include <react/renderer/attributedstring/conversions.h>
#include <react/renderer/components/iostextinput/propsConversions.h>
#include <react/renderer/core/graphicsConversions.h>

namespace facebook::react {

PasteTextInputProps::PasteTextInputProps(
    const PropsParserContext &context,
    const PasteTextInputProps &sourceProps,
    const RawProps& rawProps)
    : BaseTextInputProps(context, sourceProps, rawProps),
    traits(convertRawProp(context, rawProps, sourceProps.traits, {})),
    smartPunctuation(convertRawProp(context, rawProps, "smartPunctuation", sourceProps.smartPunctuation, {})),
    disableCopyPaste(convertRawProp(context, rawProps, "disableCopyPaste", sourceProps.disableCopyPaste, {false})),
    paragraphAttributes(convertRawProp(
        context,
        rawProps,
        sourceProps.paragraphAttributes,
        {})),
    defaultValue(convertRawProp(
        context,
        rawProps,
        "defaultValue",
        sourceProps.defaultValue,
        {})),
    placeholder(convertRawProp(
        context,
        rawProps,
        "placeholder",
        sourceProps.placeholder,
        {})),
    placeholderTextColor(convertRawProp(
        context,
        rawProps,
        "placeholderTextColor",
        sourceProps.placeholderTextColor,
        {})),
    maxLength(convertRawProp(
        context,
        rawProps,
        "maxLength",
        sourceProps.maxLength,
        {})),
    cursorColor(convertRawProp(
        context,
        rawProps,
        "cursorColor",
        sourceProps.cursorColor,
        {})),
    selectionColor(convertRawProp(
        context,
        rawProps,
        "selectionColor",
        sourceProps.selectionColor,
        {})),
    selectionHandleColor(convertRawProp(
        context,
        rawProps,
        "selectionHandleColor",
        sourceProps.selectionHandleColor,
        {})),
    underlineColorAndroid(convertRawProp(
        context,
        rawProps,
        "underlineColorAndroid",
        sourceProps.underlineColorAndroid,
        {})),
    text(convertRawProp(context, rawProps, "text", sourceProps.text, {})),
    mostRecentEventCount(convertRawProp(
        context,
        rawProps,
        "mostRecentEventCount",
        sourceProps.mostRecentEventCount,
        {})),
    autoFocus(convertRawProp(
        context,
        rawProps,
        "autoFocus",
        sourceProps.autoFocus,
        {})),
    selection(convertRawProp(
        context,
        rawProps,
        "selection",
        sourceProps.selection,
        std::optional<Selection>())),
    inputAccessoryViewID(convertRawProp(
        context,
        rawProps,
        "inputAccessoryViewID",
        sourceProps.inputAccessoryViewID,
        {})){};

void PasteTextInputProps::setProp(
    const PropsParserContext& context,
    RawPropsPropNameHash hash,
    const char* propName,
    const RawValue& value) {
        ViewProps::setProp(context, hash, propName, value);
        BaseTextProps::setProp(context, hash, propName, value);
}

TextAttributes PasteTextInputProps::getEffectiveTextAttributes(Float fontSizeMultiplier) const {
    auto result = TextAttributes::defaultTextAttributes();
    result.fontSizeMultiplier = fontSizeMultiplier;
    result.apply(textAttributes);
                                                                   
    /*
    * These props are applied to `View`, therefore they must not be a part of
    * base text attributes.
    */
    result.backgroundColor = clearColor();
    result.opacity = 1;

    return result;
}

ParagraphAttributes PasteTextInputProps::getEffectiveParagraphAttributes() const {
    auto result = paragraphAttributes;
    
    if (!multiline) {
        result.maximumNumberOfLines = 1;
    }
    
    return result;
}

} // namespace facebook::react
